apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: person-updates-producer
  labels:
    app: person-updates-producer
    version: {{ .Values.image_api.tag }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: person-updates-producer
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: person-updates-producer
        version: {{ .Values.image_api.tag }}
    spec:
      containers:
      - name: {{ .Values.image_person_updates_producer.name }}
        image: {{ .Values.image_person_updates_producer.repository }}:{{ .Values.image_person_updates_producer.tag }}
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args: ["POD_A_RECORD"]
        args: ["export POD_A_RECORD=$(echo $POD_IP | sed 's/\\./\\-/g') && /app/bin/person_updates_producer foreground"]
        env:
    # RPC env
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NAMESPACE
            value: "{{ .Values.env_api.NAMESPACE }}"
          # Phoenix
          - name: ERLANG_COOKIE
            value: "{{ .Values.env_api.ERLANG_COOKIE }}"
          # Database
          - name: DB_NAME
            value: "{{ .Values.env_db.POSTGRES_DB }}"
          - name: DB_USER
            value: "{{ .Values.env_db.POSTGRES_USER }}"
          - name: DB_PASSWORD
    {{- if .Values.env_db.POSTGRES_PASSWORD }}
            value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
    {{ else }}
            valueFrom:
                secretKeyRef:
                  name: db
                  key: DB_PASSWORD
    {{ end }}
          - name: DB_HOST
            value: "{{ .Values.env_api.DB_HOST }}"
          - name: DB_PORT
            value: "{{ .Values.env_api.DB_PORT }}"
          - name: DB_POOL_SIZE
            value: "{{ .Values.env_person.DB_POOL_SIZE }}"
          - name: BATCH_SIZE
            value: "{{ .Values.env_api.BATCH_SIZE }}"
          - name: KAFKA_BROKERS
            value: "{{ .Values.env_api.KAFKA_BROKERS }}"
          - name: PERSON_EVENTS_PARTITIONS
            value: "{{ .Values.env_api.PERSON_EVENTS_PARTITIONS }}"
          - name: DB_DEDUPLICATION_NAME
            value: "{{ .Values.env_api.DB_DEDUPLICATION_NAME }}"
          - name: DB_DEDUPLICATION_USER
            value: "{{ .Values.env_api.DB_DEDUPLICATION_USER }}"
          - name: DB_DEDUPLICATION_PASSWORD
    {{- if .Values.env_db_dedup.POSTGRES_PASSWORD }}
            value: "{{ .Values.env_db_dedup.POSTGRES_PASSWORD }}"
    {{ else }}
            valueFrom:
              secretKeyRef:
                name: db
                key: DB_PASSWORD
    {{ end }}
          - name: DB_DEDUPLICATION_HOST
            value: "{{ .Values.env_api.DB_DEDUPLICATION_HOST }}"
          - name: DB_DEDUPLICATION_PORT
            value: "{{ .Values.env_api.DB_DEDUPLICATION_PORT }}"
          - name: DEDUPLICATION_POOL_SIZE
            value: "{{ .Values.env_api.DEDUPLICATION_POOL_SIZE }}"
        resources:
          requests:
            cpu: {{ .Values.resources_api.cpu }}
            memory: {{ .Values.resources_api.memory }}
          limits:
            cpu: {{ .Values.resources_api.cpu_limit }}
            memory: {{ .Values.resources_api.memory_limit }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: postgres
              topologyKey: failure-domain.beta.kubernetes.io/zone
        {{- if .Values.nodeSelector_api }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.nodeSelector_api}}
        {{ end }}
