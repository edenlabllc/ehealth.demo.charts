apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
    version: {{ .Values.image_api.tag }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: api
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api
        version: {{ .Values.image_api.tag }}
    spec:
      containers:
      - name: mpi-api
        image: {{ .Values.image_api.repository }}:{{ .Values.image_api.tag }}
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args: ["POD_A_RECORD"]
        args: ["export POD_A_RECORD=$(echo $POD_IP | sed 's/\\./\\-/g') && /app/bin/mpi foreground"]
        ports:
        - containerPort: 4000
          protocol: TCP
        env:
        # RPC env
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NAMESPACE
          value: "{{ .Values.env_api.NAMESPACE }}"
        # Phoenix
        - name: APP_PORT
          value: "{{ .Values.env_api.port }}"
        - name: APP_HOST
          value: "{{ .Values.env_api.host }}"
        - name: APP_SECRET_KEY
          value: "{{ .Values.env_api.secret }}"
        - name: ERLANG_COOKIE
          value: "{{ .Values.env_api.ERLANG_COOKIE }}"
        - name: MAX_PERSONS_RESULT
          value: "{{ .Values.env_api.MAX_PERSONS_RESULT }}"
        - name: DEDUPLICATION_SCORE
          value: "{{ .Values.env_api.DEDUPLICATION_SCORE }}"
        - name: DEDUPLICATION_MANUAL_SCORE_MIN
          value: "{{ .Values.env_api.DEDUPLICATION_MANUAL_SCORE_MIN }}"
        - name: DEDUPLICATION_MANUAL_SCORE_MAX
          value: "{{ .Values.env_api.DEDUPLICATION_MANUAL_SCORE_MAX }}"
        # Database
        - name: DB_NAME
          value: "{{ .Values.env_db.POSTGRES_DB }}"
        - name: DB_USER
          value: "{{ .Values.env_db.POSTGRES_USER }}"
        - name: DB_PASSWORD
  {{- if .Values.env_db.POSTGRES_PASSWORD }}
          value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{ end }}
        - name: DB_HOST
          value: "{{ .Values.env_api.DB_HOST }}"
        - name: DB_PORT
          value: "{{ .Values.env_api.DB_PORT }}"
        - name: POOL_SIZE
          value: "{{ .Values.env_api.DB_POOL_SIZE }}"
        # App migrations
        - name: DB_MIGRATE
          value: "{{ .Values.env_api.DB_MIGRATE }}"
        # App config
        - name: DEDUPLICATION_SCHEDULE
          value: "{{ .Values.env_api.DEDUPLICATION_SCHEDULE }}"
        - name: DB_DEDUPLICATION_NAME
          value: "{{ .Values.env_api.DB_DEDUPLICATION_NAME }}"
        - name: DB_DEDUPLICATION_USER
          value: "{{ .Values.env_api.DB_DEDUPLICATION_USER }}"
        - name: DB_DEDUPLICATION_PASSWORD
  {{- if .Values.env_db_dedup.POSTGRES_PASSWORD }}
          value: "{{ .Values.env_db_dedup.POSTGRES_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{ end }}
        - name: DB_DEDUPLICATION_HOST
          value: "{{ .Values.env_api.DB_DEDUPLICATION_HOST }}"
        - name: DB_DEDUPLICATION_PORT
          value: "{{ .Values.env_api.DB_DEDUPLICATION_PORT }}"
        - name: DEDUPLICATION_POOL_SIZE
          value: "{{ .Values.env_api.DEDUPLICATION_POOL_SIZE }}"
        - name: KAFKA_BROKERS
          value: "{{ .Values.env_api.KAFKA_BROKERS }}"
          {{- if or (eq .Values.env "dev") (eq .Values.env "demo") (eq .Values.env "preprod") (eq .Values.env "prod") }}
        - name: MAX_POSTPONED_MANUAL_MERGE_REQUESTS
          value: "{{ .Values.env_api.MAX_POSTPONED_MANUAL_MERGE_REQUESTS }}"
        - name: MANUAL_MERGE_QUORUM
          value: "{{ .Values.env_api.MANUAL_MERGE_QUORUM }}"
        - name: DB_READ_USER
          value: "{{ .Values.env_api.DB_READ_USER }}"
        - name: DB_READ_NAME
          value: "{{ .Values.env_api.DB_READ_NAME }}"
        - name: DB_READ_HOST
          value: "{{ .Values.env_api.DB_READ_HOST }}"
        - name: DB_READ_PORT
          value: "{{ .Values.env_api.DB_READ_PORT }}"
        - name: READ_POOL_SIZE
          value: "{{ .Values.env_api.READ_POOL_SIZE }}"
        - name: DB_READ_PASSWORD
  {{- if .Values.env_api.DB_READ_PASSWORD }}
          value: "{{ .Values.env_api.DB_READ_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{ end }}
          {{- end }}
        resources:
          requests:
            cpu: {{ .Values.resources_api.cpu }}
            memory: {{ .Values.resources_api.memory }}
          limits:
            cpu: {{ .Values.resources_api.cpu_limit }}
            memory: {{ .Values.resources_api.memory_limit }}
        readinessProbe:
          timeoutSeconds: 2
          initialDelaySeconds: 5
          failureThreshold: 3
          tcpSocket:
            port: 4000
        livenessProbe:
          timeoutSeconds: 2
          initialDelaySeconds: 5
          failureThreshold: 3
          tcpSocket:
            port: 4000
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: postgres
              topologyKey: failure-domain.beta.kubernetes.io/zone
        {{- if .Values.nodeSelector_api }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.nodeSelector_api}}
        {{ end }}
