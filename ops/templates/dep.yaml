apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
    version: {{ .Values.image_api.tag }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: api
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api
        version: {{ .Values.image_api.tag }}
    spec:
      containers:
      - name: ops-api
        image: {{ .Values.image_api.repository }}:{{ .Values.image_api.tag }}
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args: ["POD_A_RECORD"]
        args: ["export POD_A_RECORD=$(echo $POD_IP | sed 's/\\./\\-/g') && /app/bin/ops foreground"]
        ports:
        - containerPort: 4000
          protocol: TCP
        env:
        - name: NAMESPACE
          value: "{{ .Values.env_api.NAMESPACE }}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # Phoenix
        - name: PORT
          value: "{{ .Values.env_api.port }}"
        - name: HOST
          value: "{{ .Values.env_api.host }}"
        - name: SECRET_KEY
          value: "{{ .Values.env_api.secret }}"
        - name: ERLANG_COOKIE
          value: "{{ .Values.env_api.ERLANG_COOKIE }}"
        # Database
        - name: DB_NAME
          value: "{{ .Values.env_db.POSTGRES_DB }}"
        - name: DB_USER
          value: "{{ .Values.env_db.POSTGRES_USER }}"
        - name: DB_PASSWORD
  {{- if .Values.env_db.POSTGRES_PASSWORD }}
          value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{ end }}
        - name: DB_HOST
          value: "{{ .Values.env_api.DB_HOST }}"
        - name: DB_PORT
          value: "{{ .Values.env_api.DB_PORT }}"
        - name: DB_POOL_SIZE
          value: "{{ .Values.env_api.DB_POOL_SIZE }}"
        # Database read
        - name: READ_DB_NAME
          value: "{{ .Values.env_api.READ_DB_NAME }}"
        - name: READ_DB_USER
          value: "{{ .Values.env_api.READ_DB_USER }}"
        - name: READ_DB_PASSWORD
  {{- if .Values.env_db.POSTGRES_PASSWORD }}
          value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{ end }}
        - name: READ_DB_HOST
          value: "{{ .Values.env_api.READ_DB_HOST }}"
        - name: READ_DB_PORT
          value: "{{ .Values.env_api.READ_DB_PORT }}"
        - name: READ_DB_POOL_SIZE
          value: "{{ .Values.env_api.READ_DB_POOL_SIZE }}"
        # Blocks database
        - name: BLOCK_DB_NAME
          value: "{{ .Values.env_blocks_db.POSTGRES_DB }}"
        - name: BLOCK_DB_USER
          value: "{{ .Values.env_blocks_db.POSTGRES_USER }}"
        - name: BLOCK_DB_PASSWORD
  {{- if .Values.env_db.POSTGRES_PASSWORD }}
          value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD_BLOCK
  {{ end }}
        - name: BLOCK_DB_HOST
          value: "{{ .Values.env_api.BLOCK_DB_HOST }}"
        - name: BLOCK_DB_PORT
          value: "{{ .Values.env_api.BLOCK_DB_PORT }}"
        - name: BLOCK_DB_POOL_SIZE
          value: "{{ .Values.env_api.BLOCK_DB_POOL_SIZE }}"
        - name: CLOSE_BLOCK_SCHEDULE
          value: "{{ .Values.env_api.CLOSE_BLOCK_SCHEDULE }}"
        {{- if .Values.env_api.EM_ENABLED }}
        # EventManager Database
        - name: EVENT_MANAGER_DB_NAME
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_NAME }}"
        - name: EVENT_MANAGER_DB_USER
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_USER }}"
        - name: EVENT_MANAGER_DB_PASSWORD
  {{- if .Values.env_api.EVENT_MANAGER_DB_PASSWORD }}
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_PASSWORD }}"
  {{ else }}
          valueFrom:
             secretKeyRef:
               name: db
               key: EM_PASSWORD
  {{ end }}
        - name: EVENT_MANAGER_DB_HOST
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_HOST }}"
        - name: EVENT_MANAGER_DB_PORT
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_PORT }}"
        - name: EVENT_MANAGER_DB_POOL_SIZE
          value: "{{ .Values.env_api.EVENT_MANAGER_DB_POOL_SIZE }}"
        - name: DECLARATION_AUTO_APPROVE_SCHEDULE
          value: "{{ .Values.env_api.DECLARATION_AUTO_APPROVE_SCHEDULE }}"
        - name: DECLARATION_AUTOTERMINATION_SCHEDULE
          value: "{{ .Values.env_api.DECLARATION_AUTOTERMINATION_SCHEDULE }}"
          {{ end }}
        # App migrations
        - name: DB_MIGRATE
          value: "{{ .Values.env_api.DB_MIGRATE }}"
        - name: IL_ENDPOINT
          value: "{{ .Values.env_api.IL_ENDPOINT }}"
        resources:
          requests:
            cpu: {{ .Values.resources_api.cpu }}
            memory: {{ .Values.resources_api.memory }}
          limits:
            cpu: {{ .Values.resources_api.cpu_limit }}
            memory: {{ .Values.resources_api.memory_limit }}
        readinessProbe:
          timeoutSeconds: 2
          initialDelaySeconds: 5
          failureThreshold: 3
          tcpSocket:
            port: 4000
        livenessProbe:
          timeoutSeconds: 2
          initialDelaySeconds: 5
          failureThreshold: 3
          tcpSocket:
            port: 4000
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: postgres
              topologyKey: failure-domain.beta.kubernetes.io/zone
